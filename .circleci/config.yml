version: 2

references:

base_image: &base_image
  hashicorp/terraform:light

working_directory: &working_directory
  ~/project

default_config: &default_config
  docker:
    - image: *base_image
  working_directory: *working_directory
  environment:
    BASH_ENV: /root/.bashrc

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

set_terraform_environment: &set_terraform_environment
  run:
    name: set terraform environment
    command: |
      cd && touch $BASH_ENV
      echo 'export TERRAFORM_ENVIRONMENT=prod' >> $BASH_ENV

set_gcloud_environment: &set_gcloud_environment
  run:
    name: set gcloud environment
    command: |
      cd && touch $BASH_ENV

      if [ "${CIRCLE_BRANCH}" == "master" ]; then
        echo 'export KUBECTL_DRYRUN=false' >> $BASH_ENV
      else
        echo 'export KUBECTL_DRYRUN=true' >> $BASH_ENV
      fi

terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      source $BASH_ENV
      cd terraform
      terraform init -backend-config="bucket=$TERRAFORM_STATE_GCP_BUCKET"
      terraform workspace select $TERRAFORM_ENVIRONMENT

tfnotify_install: &tfnotify_install
  run:
    name: tfnotify install
    command: |
      curl -vOL https://github.com/mercari/tfnotify/releases/download/v0.2.0/tfnotify_v0.2.0_linux_amd64.tar.gz
      tar -xzvf tfnotify_v0.2.0_linux_amd64.tar.gz
      mv tfnotify_v0.2.0_linux_amd64/tfnotify /usr/local/bin
      rm -rf tfnotify_v0.2.0_linux_amd64*

helm_install: &helm_install
  run:
    name: helm install
    command: |
      curl -vOL https://storage.googleapis.com/kubernetes-helm/helm-v2.11.0-linux-amd64.tar.gz
      tar -xzvf helm-v2.11.0-linux-amd64.tar.gz
      mv linux-amd64/helm /usr/local/bin
      rm -rf linux-amd64 helm-v2.11.0-linux-amd64.tar.gz

helm_init: &helm_init
  run:
    name: helm init
    command: helm init --client-only

apply_job: &apply_job
  <<: *default_config
  steps:
    - *restore_repo
    - *set_terraform_environment
    - *terraform_init
    - *helm_install
    - *helm_init
    - attach_workspace:
        at: *working_directory
    - run:
        name: terraform apply
        command: |
          source $BASH_ENV
          cd terraform
          terraform apply \
            --auto-approve \
            terraform.plan
jobs:
  lint:
    <<: *default_config
    steps:
      - checkout
      - *set_terraform_environment
      - run:
          name: terraform fmt
          command: |
            source $BASH_ENV
            cd terraform
            if [ $(terraform fmt | grep -v .terraform | tee fmt_result.txt | wc -l) -gt 0 ]; then
              echo "Terraform files require syntax reformating:"
              echo
              cat fmt_result.txt
              rm fmt_result.txt
              git checkout -- .
              echo
              echo "Please run terraform fmt"
              exit 1
            fi
      - *save_repo

  plan:
    <<: *default_config
    steps:
      - *restore_repo
      - *set_terraform_environment
      - *terraform_init
      - *tfnotify_install
      - *helm_install
      - *helm_init
      - run:
          name: terraform plan
          command: |
            source $BASH_ENV
            cd terraform
            terraform plan \
              -var-file=config/$TERRAFORM_ENVIRONMENT.tfvars \
              -out=terraform.plan
      - run:
          name: tfnotify plan
          command: |
            source $BASH_ENV
            cd terraform
            terraform plan terraform.plan | tfnotify plan

      - persist_to_workspace:
          root: *working_directory
          paths:
            - terraform/terraform.plan

  apply:
    <<: *apply_job

  gcloud_dryrun: &gcloud_dryrun
    <<: *default_config
    docker:
      - image: google/cloud-sdk
    steps:
      - *restore_repo
      - *set_gcloud_environment
      - run:
          name: gcloud init
          command: |
            echo $GOOGLE_CREDENTIALS | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}

      - run:
          name: kubectl init
          command: |
            gcloud container clusters get-credentials ${GKE_CLUSTER_NAME}

      - run:
          name: set clusterrole
          command: |
            kubectl create clusterrolebinding cluster-sa-binding \
            --clusterrole=cluster-admin \
            --user=$(gcloud config get-value core/account) \
            --dry-run=${KUBECTL_DRYRUN} || true

      - run:
          name: install istio
          command: |
            kubectl apply --overwrite=true --dry-run=${KUBECTL_DRYRUN} --wait -f https://github.com/knative/serving/releases/download/v0.4.0/istio-crds.yaml
            kubectl apply --overwrite=true --dry-run=${KUBECTL_DRYRUN} --wait -f https://github.com/knative/serving/releases/download/v0.4.0/istio.yaml
            kubectl label --overwrite=true --dry-run=${KUBECTL_DRYRUN} namespace default istio-injection=enabled

      - run:
          name: install knative
          command: |
            kubectl apply --overwrite=true --dry-run=${KUBECTL_DRYRUN} --wait \
              --filename https://github.com/knative/serving/releases/download/v0.4.0/serving.yaml \
              --filename https://github.com/knative/build/releases/download/v0.4.0/build.yaml \
              --filename https://github.com/knative/eventing/releases/download/v0.4.0/in-memory-channel.yaml \
              --filename https://github.com/knative/eventing/releases/download/v0.4.0/release.yaml \
              --filename https://github.com/knative/eventing-sources/releases/download/v0.4.0/release.yaml \
              --filename https://github.com/knative/serving/releases/download/v0.4.0/monitoring.yaml \
              --filename https://raw.githubusercontent.com/knative/serving/v0.4.0/third_party/config/build/clusterrole.yaml

  gcloud_apply:
    <<: *gcloud_dryrun

  destroy:
    <<: *default_config
    steps:
      - *restore_repo
      - *set_terraform_environment
      - *terraform_init
      - run:
          name: terraform destroy
          command: |
            source $BASH_ENV
            cd terraform
            terraform destroy -auto-approve -var-file=config/$TERRAFORM_ENVIRONMENT.tfvars

workflows:
  version: 2
  lint_plan_apply:
    jobs:
      - lint
      - plan:
          requires: [lint]

      - gcloud_dryrun:
          requires: [plan]
          filters:
            branches:
              ignore: [master]

      - apply:
          requires: [plan]
          filters:
            branches:
              only: master

      - gcloud_apply:
          requires: [apply]

  cleanup:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - destroy
